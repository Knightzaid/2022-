var roleHarvester = {

    run: function(creep) {

        if(creep.memory.supplying && creep.store[RESOURCE_ENERGY] == 0) {
            creep.memory.supplying = false;
            creep.say('ðŸ§­ Fetch');
        }
        if(!creep.memory.supplying && creep.store.getFreeCapacity() == 0) {
            creep.memory.supplying = true;
            creep.say('ðŸ§§ Supply');
        }
        
        if (creep.memory.supplying) {
            var targets = creep.room.find(FIND_STRUCTURES, {
                filter: (structure) => {
                        return (structure.structureType == STRUCTURE_SPAWN ||
                                structure.structureType == STRUCTURE_TOWER ||
                                structure.structureType == STRUCTURE_EXTENSION) && 
                                structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;
                    }
            });
            if(targets.length > 0) {
                if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(targets[0],{visualizePathStyle:{stroke: 'white', strokeWidth: .1, opacity: .5, lineStyle: 'dotted'}});
                }
            }
        } 
        else {
            let container = creep.pos.findClosestByRange(FIND_STRUCTURES, {
                filter: (structure) => {
                    return (structure.structureType == STRUCTURE_LINK ||
                            structure.structureType == STRUCTURE_CONTAINER) &&
                            (structure.store[RESOURCE_ENERGY] > 0);
                }
            });
            if (container != undefined) {
                if (creep.withdraw(container, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(container,{visualizePathStyle:{stroke: 'white', strokeWidth: .1, opacity: .5, lineStyle: 'dotted'}});
                }
            }
            else {
            let sources = creep.room.find(FIND_SOURCES);
            if (creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {
                creep.moveTo(sources[0],{visualizePathStyle:{stroke: 'white', strokeWidth: .1, opacity: .5, lineStyle: 'dotted'}});
                }
            }
            
            const drops = creep.pos.findClosestByRange(FIND_DROPPED_RESOURCES);
                if(drops) {
                if(creep.pickup(drops, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                creep.moveTo(drops, {visualizePathStyle:{stroke: 'white', strokeWidth: .1, opacity: .5, lineStyle: 'dotted'}});
                }
            }
        }
    }
};

module.exports = roleHarvester;
