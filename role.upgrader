var roleUpgrader = {

    /** @param {Creep} creep **/
    run: function(creep) {

    if (creep.memory.upgrading && creep.store[RESOURCE_ENERGY] == 0) {
      creep.memory.upgrading = false;
      creep.say('ðŸ”„ harvest');
    }

    if (!creep.memory.upgrading && creep.store.getFreeCapacity() == 0) {
      creep.memory.upgrading = true;
      creep.say('âš¡ upgrade');
    }

    if (creep.memory.upgrading) {
      if (creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {
        creep.moveTo(creep.room.controller, {visualizePathStyle:{stroke: '#07F8E9', strokeWidth: .1, opacity: .5, lineStyle: 'dotted'}});
      }
    }
    else {
      let targets = creep.room.find(FIND_STRUCTURES, {
        filter: (structure) => {
          return (
            structure.structureType == STRUCTURE_CONTAINER ||
            structure.structureType == STRUCTURE_EXTENSION ||
            structure.structureType == STRUCTURE_STORAGE) &&
            structure.store.getUsedCapacity(RESOURCE_ENERGY) >= creep.store.getFreeCapacity();
        }
      });
      if (targets.length > 0) {
        if(creep.withdraw(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
            creep.moveTo(targets[0],{visualizePathStyle:{stroke: 'white', strokeWidth: .1, opacity: .5, lineStyle: 'dotted'}});
                }
            
    

        let dropSite = creep.pos.findClosestByRange(targets);
        if (creep.withdraw(dropSite, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
          creep.moveTo(dropSite, {visualizePathStyle:{stroke: '#07F8E9', strokeWidth: .1, opacity: .5, lineStyle: 'dotted'}});
        }
      }
      else {
        let sources = creep.room.find(FIND_SOURCES);
        let nearestSource = creep.pos.findClosestByRange(sources);

        if (creep.harvest(nearestSource) == ERR_NOT_IN_RANGE) {
          creep.moveTo(nearestSource, {visualizePathStyle:{stroke: '#07F8E9', strokeWidth: .1, opacity: .5, lineStyle: 'dotted'}});
        }
      }
    }
  }
};

module.exports = roleUpgrader;
